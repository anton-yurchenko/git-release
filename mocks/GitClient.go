// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/github"
	mock "github.com/stretchr/testify/mock"
)

// GitClient is an autogenerated mock type for the GitClient type
type GitClient struct {
	mock.Mock
}

// CreateRef provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *GitClient) CreateRef(_a0 context.Context, _a1 string, _a2 string, _a3 *github.Reference) (*github.Reference, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Reference
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *github.Reference) *github.Reference); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Reference)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *github.Reference) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, *github.Reference) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteRef provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *GitClient) DeleteRef(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRef provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *GitClient) GetRef(_a0 context.Context, _a1 string, _a2 string, _a3 string) (*github.Reference, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *github.Reference
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Reference); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Reference)
		}
	}

	var r1 *github.Response
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(_a0, _a1, _a2, _a3)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
